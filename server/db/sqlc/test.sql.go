// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: test.sql

package sqlcdb

import (
	"context"
)

const createTest = `-- name: CreateTest :one
insert into test_schema (
    free_text
) values (
    $1
)
returning id, free_text
`

func (q *Queries) CreateTest(ctx context.Context, freeText string) (TestSchema, error) {
	row := q.db.QueryRow(ctx, createTest, freeText)
	var i TestSchema
	err := row.Scan(&i.ID, &i.FreeText)
	return i, err
}

const deleteTest = `-- name: DeleteTest :exec
delete from test_schema
where id = $1
`

func (q *Queries) DeleteTest(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTest, id)
	return err
}

const getTest = `-- name: GetTest :one
select id, free_text from test_schema
where id = $1 limit 1
`

func (q *Queries) GetTest(ctx context.Context, id int64) (TestSchema, error) {
	row := q.db.QueryRow(ctx, getTest, id)
	var i TestSchema
	err := row.Scan(&i.ID, &i.FreeText)
	return i, err
}

const listTests = `-- name: ListTests :many
select id, free_text from test_schema
order by id
`

func (q *Queries) ListTests(ctx context.Context) ([]TestSchema, error) {
	rows, err := q.db.Query(ctx, listTests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TestSchema
	for rows.Next() {
		var i TestSchema
		if err := rows.Scan(&i.ID, &i.FreeText); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTest = `-- name: UpdateTest :exec
update test_schema
    set free_text = $2
where id = $1
`

type UpdateTestParams struct {
	ID       int64
	FreeText string
}

func (q *Queries) UpdateTest(ctx context.Context, arg UpdateTestParams) error {
	_, err := q.db.Exec(ctx, updateTest, arg.ID, arg.FreeText)
	return err
}
