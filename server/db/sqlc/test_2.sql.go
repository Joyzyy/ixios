// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: test_2.sql

package sqlcdb

import (
	"context"
)

const createTest_2 = `-- name: CreateTest_2 :one
insert into test_schema_2 (
    free_text_2
) values (
    $1
)
returning id, free_text_2
`

func (q *Queries) CreateTest_2(ctx context.Context, freeText2 string) (TestSchema2, error) {
	row := q.db.QueryRow(ctx, createTest_2, freeText2)
	var i TestSchema2
	err := row.Scan(&i.ID, &i.FreeText2)
	return i, err
}

const deleteTest_2 = `-- name: DeleteTest_2 :exec
delete from test_schema_2
where id = $1
`

func (q *Queries) DeleteTest_2(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTest_2, id)
	return err
}

const getTest_2 = `-- name: GetTest_2 :one
select id, free_text_2 from test_schema_2
where id = $1 limit 1
`

func (q *Queries) GetTest_2(ctx context.Context, id int64) (TestSchema2, error) {
	row := q.db.QueryRow(ctx, getTest_2, id)
	var i TestSchema2
	err := row.Scan(&i.ID, &i.FreeText2)
	return i, err
}

const listTests_2 = `-- name: ListTests_2 :many
select id, free_text_2 from test_schema_2
order by id
`

func (q *Queries) ListTests_2(ctx context.Context) ([]TestSchema2, error) {
	rows, err := q.db.Query(ctx, listTests_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TestSchema2
	for rows.Next() {
		var i TestSchema2
		if err := rows.Scan(&i.ID, &i.FreeText2); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTest_2 = `-- name: UpdateTest_2 :exec
update test_schema_2
    set free_text_2 = $2
where id = $1
`

type UpdateTest_2Params struct {
	ID        int64
	FreeText2 string
}

func (q *Queries) UpdateTest_2(ctx context.Context, arg UpdateTest_2Params) error {
	_, err := q.db.Exec(ctx, updateTest_2, arg.ID, arg.FreeText2)
	return err
}
